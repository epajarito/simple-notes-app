<?php

namespace Tests\Feature;

use App\Http\Middleware\ValidateJsonApiHeaders;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Route;
use Tests\TestCase;

class ValidateJsonApiHeadersTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Route::any('test-route', fn()=> 'ok')
            ->middleware(ValidateJsonApiHeaders::class);
    }

    /** @test */
    public function accept_header_must_be_present_in_all_requests(): void
    {
        $this->get('test-route', [
            'accept' => 'application/vnd.api+json'
        ])->assertSuccessful();
    }

    /** @test */
    public function content_type_header_must_be_present_on_all_posts_requests(): void
    {
        $this->post('test-route',[],['accept' => 'application/vnd.api+json'])
            ->assertStatus(415);

        $this->post(
            'test-route',
            [],
            [
                'accept' => 'application/vnd.api+json',
                'content-type' => 'application/vnd.api+json',
            ]
        )
            ->assertSuccessful();
    }

    /** @test */
    public function content_type_header_must_be_present_on_all_patch_requests(): void
    {

        $this->patch('test-route',[],['accept' => 'application/vnd.api+json'])
            ->assertStatus(415);

        $this->patch(
            'test-route',
            [],
            [
                'accept' => 'application/vnd.api+json',
                'content-type' => 'application/vnd.api+json',
            ]
        )
            ->assertSuccessful();
    }

    /** @test */
    public function content_type_header_must_be_present_in_response()
    {
        $this->get('test-route', [
            'accept' => 'application/vnd.api+json'
        ])->assertHeader('content-type', 'application/vnd.api+json');

        $this->post('test-route', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json',
        ])->assertHeader('content-type', 'application/vnd.api+json');

        $this->patch('test-route', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json',
        ])->assertHeader('content-type', 'application/vnd.api+json');
    }

    /** @test */
    public function content_type_header_must_not_be_present_in_empty_response()
    {
        Route::any('empty-response', fn()=> response()->noContent())->middleware(ValidateJsonApiHeaders::class);

        $this->get('empty-response', [
            'accept' => 'application/vnd.api+json'
        ])->assertHeaderMissing('content-type');

        $this->post('empty-response', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json',
        ])->assertHeaderMissing('content-type');

        $this->patch('empty-response', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json',
        ])->assertHeaderMissing('content-type');

        $this->delete('empty-response', [], [
            'accept' => 'application/vnd.api+json',
            'content-type' => 'application/vnd.api+json',
        ])->assertHeaderMissing('content-type');
    }
}
